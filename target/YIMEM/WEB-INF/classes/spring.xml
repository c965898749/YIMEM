<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--1.数据源-->
    <!--rabbitmq数据源-->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${db_driver}"></property>
        <property name="url" value="${db_url}"></property>
        <property name="username" value="${db_username}"></property>
        <property name="password" value="${db_password}"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定数据源对象-->
        <property name="dataSource" ref="dataSource"></property>
        <!--映射文件所在的路径，此处会自动扫描指定目录下所有的映射文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <!--
                添加MyBatis的主配置文件
               此时的主配置文件中只有一些框架参数以及别名的配置
        -->
        <property name="configLocation" value="classpath:mybatisConfig.xml"></property>

    </bean>

    <!--
        MapperScannerConfigurer：用于扫描指定包下所有的Mapper接口
        并在Spring容器中生成对应接口的动态代理实现类
        在Spring的其它Bean中，可以直接使用@Autowired来注入要使用的Mapper接口对象
    -->
    <bean id="mapperSacnnerConfigure" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--
            会话工厂的bean的名字
            注意:此处是bean的id，所以不能使用ref
        -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!--
            指定要扫描的Mapper接口所在的包
        -->
        <property name="basePackage" value="com.sy.mapper"></property>
    </bean>


    <!--3.JDBC事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--4.开启事务注解驱动-->
    <tx:annotation-driven transaction-manager="txManager"></tx:annotation-driven>
    <!--5.service,dao的IOC扫描-->
    <context:component-scan base-package="com.sy.tool,com.sy.service,com.sy.mapper"></context:component-scan>
    <!--
              配置一个对@Aspect进行注解扫描的节点
          -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="javaMailSender"
          class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="protocol" value="${email.protocol}"/>
        <property name="host" value="${email.host}"/>
        <property name="port" value="${email.port}"/>
        <property name="username" value="${email.username}"/>
        <property name="password" value="${email.password}"/>
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.auth">${email.auth}</prop>
                <prop key="mail.smtp.timeout">${email.timout}</prop>
            </props>
        </property>

    </bean>

    <bean id="simpleMailMessage" class="org.springframework.mail.SimpleMailMessage">
        <!-- 发件人email -->
        <property name="from" value="${email.username}" />
        <!--收件人email-->
        <property name="to" value="${email.default.to}" />
        <!--email主题(标题)-->
        <property name="subject" value="${email.default.subject}" />
        <!--email主题内容-->
        <property name="text">
            <value>${email.default.text}</value>
        </property>
    </bean>

</beans>
